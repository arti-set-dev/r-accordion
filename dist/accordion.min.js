/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 975:
/***/ (function() {

// extracted by mini-css-extract-plugin

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";

;// CONCATENATED MODULE: ./src/accordion.js
class Accordion {
  constructor(selector, options) {
    let defaultOptions = {
      isOpen: () => {},
      isClose: () => {},
      isAutoClose: () => {},
      speed: 300,
      autoClose: false,
      classNames: {
        accordionItem: 'accordion-item',
        accordionBtn: 'accordion-btn',
        accordionContent: 'accordion-content',
        showContent: 'show',
        arrowIcon: 'arrow-icon',
        arrrowIconActive: 'icon-active',
        btnItemActive: 'accordion-btn-active'
      }
    };
    this.options = Object.assign(defaultOptions, options);
    this.accordionList = document?.querySelector(selector);
    this.accordionBtnList = this.accordionList?.querySelectorAll(`.${this.options.classNames.accordionBtn}`);
    this.accordionsContents = this.accordionList?.querySelectorAll(`.accordion-content`);
    this.previusActiveAccordion = null;
    this.currentActiveAccordion = null;
    this.events();
  }
  events() {
    document.addEventListener('DOMContentLoaded', () => {
      if (this.accordionList) {
        document.addEventListener('click', e => {
          this.accordionBtnList.forEach(btnItem => {
            if (e.target == btnItem) {
              const accordionContent = btnItem.closest(`.${this.options.classNames.accordionItem}`).querySelector(`.${this.options.classNames.accordionContent}`);
              this.autoCloseAccordion(accordionContent);
              accordionContent?.classList.toggle(this.options.classNames.showContent);
              if (accordionContent?.classList.contains(this.options.classNames.showContent)) {
                this.openAccordion(btnItem, accordionContent);
              } else {
                this.closeAccordion(btnItem, accordionContent);
              }
            }
          });
        });
      }
    });
  }
  openAccordion(btnItem, accordionContent) {
    const arrrowIcon = btnItem?.querySelector(`.${this.options.classNames.arrowIcon}`);
    arrrowIcon?.classList.add(this.options.classNames.arrrowIconActive);
    arrrowIcon?.style.setProperty('--accordion-time', `${this.options.speed / 1000}s`);
    accordionContent?.style.setProperty('--accordion-time', `${this.options.speed / 1000}s`);
    if (accordionContent) {
      btnItem.setAttribute('aria-expanded', true);
      btnItem.setAttribute('aria-hidden', false);
      btnItem.classList.add(this.options.classNames.btnItemActive);
      btnItem.style.setProperty('--accordion-time', `${this.options.speed / 1000}s`);
      accordionContent.style.maxHeight = accordionContent.scrollHeight + 'px';
    }
    this.options.isOpen(this);
  }
  closeAccordion(btnItem, accordionContent) {
    const arrrowIcon = btnItem?.querySelector(`.${this.options.classNames.arrowIcon}`);
    arrrowIcon?.classList.remove(this.options.classNames.arrrowIconActive);
    if (accordionContent) {
      btnItem.setAttribute('aria-expanded', false);
      btnItem.setAttribute('aria-hidden', true);
      btnItem.classList.remove(this.options.classNames.btnItemActive);
      accordionContent.style.maxHeight = null;
    }
    this.options.isClose(this);
  }
  autoCloseAccordion(accordionContent) {
    if (this.options.autoClose) {
      const previusActiveAccordion = this.accordionList?.querySelector(`.${this.options.classNames.showContent}`);
      const previusActiveBtn = this.accordionList?.querySelector(`.${this.options.classNames.btnItemActive}`);
      const previusActiveArrowIcon = this.accordionList?.querySelector(`.${this.options.classNames.arrrowIconActive}`);
      const currentActiveAccordion = accordionContent;
      if (previusActiveAccordion && currentActiveAccordion != previusActiveAccordion) {
        previusActiveAccordion.classList.remove(this.options.classNames.showContent);
        previusActiveBtn?.classList.remove(this.options.classNames.btnItemActive);
        previusActiveArrowIcon?.classList.remove(this.options.classNames.arrrowIconActive);
        previusActiveAccordion.style.maxHeight = '0px';
      }
      this.options.isAutoClose(this);
    }
  }
}
// EXTERNAL MODULE: ./src/accordion.css
var accordion = __webpack_require__(975);
;// CONCATENATED MODULE: ./src/index.js


__webpack_require__.g.Accordion = Accordion;
}();
/******/ })()
;